version: '3.9'

services:
  db_postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - local_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  pgadmin4:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - backend

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "${MESSAGE_BROKER_PORT}:5672"
      - "${MESSAGE_BROKER_UI_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${MESSAGE_BROKER_USER}
      RABBITMQ_DEFAULT_PASS: ${MESSAGE_BROKER_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  service_a_api_app:
    container_name: service_a_api_app
    build:
      dockerfile: Dockerfile
    command: "uv run uvicorn --factory service_a.presentation.api.v1.main:create_app --reload --host 0.0.0.0 --port 443 --ssl-keyfile /etc/ssl/ssl.key --ssl-certfile /etc/ssl/ssl.crt"
    ports:
      - '${SERVICE_A_API_PORT}:443'
    env_file:
      - .env
    volumes:
      - ./ssl/:/etc/ssl
    depends_on:
      db_postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend

  service_b_api_app:
    container_name: service_b_api_app
    build:
      dockerfile: Dockerfile
    command: "uv run uvicorn --factory service_b.presentation.api.v1.main:create_app --reload --host 0.0.0.0 --port 443 --ssl-keyfile /etc/ssl/ssl.key --ssl-certfile /etc/ssl/ssl.crt"
    ports:
      - '${SERVICE_B_API_PORT}:443'
    env_file:
      - .env
    volumes:
      - ./ssl/:/etc/ssl
    depends_on:
      db_postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend

  worker:
    container_name: worker
    build:
      dockerfile: Dockerfile
    command: "uv run python -m worker.main"
    env_file:
      - .env
    volumes:
      - ./ssl/:/etc/ssl
    depends_on:
      db_postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend

volumes:
  local_pgdata:
  pgadmin-data:


networks:
  backend:
    driver: bridge
